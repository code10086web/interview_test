def find_shortest_path(grid):
    m, n = len(grid), len(grid[0])
    # 初始化动态规划矩阵，所有元素都设置为无穷大，除了左上角的单元格，它的值为0。
    dp = [[float('inf') for j in range(n)] for i in range(m)]
    dp[0][0] = 0

    for i in range(m):
        for j in range(n):
            if grid[i][j] == 'snake':
                # 如果当前单元格是蛇单元格，则将其值设置为无穷大。
                dp[i][j] = float('inf')
            else:
                # 否则，计算从左侧或上方的单元格到达该单元格的最短路径长度。
                if i > 0:
                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)
                if j > 0:
                    dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)

    if dp[m - 1][n - 1] == float('inf'):
        # 如果右下角单元格的值仍然是无穷大，则不存在从左上角到右下角的路径。
        return None

    # 通过移动到相邻的具有最小值的单元格反向跟踪最短路径，直到到达左上角。
    path = [(m - 1, n - 1)]
    i, j = m - 1, n - 1
    while i > 0 or j > 0:
        if i > 0 and dp[i - 1][j] < dp[i][j - 1]:
            # 如果上方的单元格具有更小的值，则移动到上方的单元格。
            i -= 1
        else:
            # 否则，移动到左侧的单元格。
            j -= 1
        path.append((i, j))

    return list(reversed(path))


grid1 = [['', '', ''], ['', 'snake', ''], ['', '', '']]
print(count_paths(grid1))  # 2

grid2 = [['', '', ''], ['snake', '', ''], ['', '', '']]
print(count_paths(grid2))  # 0

grid3 = [['', '', '', ''], ['', 'snake', '', ''], ['', '', '', ''], ['', '', 'snake', '']]
print(count_paths(grid3))  # 3

grid4 = [['', '', '', ''], ['snake', '', '', ''], ['', '', '', ''], ['snake', '', '', '']]
print(count_paths(grid4))  # 0

grid5 = [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']]
print(count_paths(grid5))  # 70

grid6 = [['', '', '', '', '', ''], ['', '', '', '', '', ''], ['', '', '', '', '', ''], ['', '', '', '', '', '']]
print(count_paths(grid6))  # 252

grid7 = [['', '', '', '', '', '', ''], ['', '', '', '', '', '', ''], ['', '', '', '', '', '', '']]
print(count_paths(grid7))  # 84

grid8 = [['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '']]
print(count_paths(grid8))  # 343

grid9 = [['', '', ''], ['', '', ''], ['', '', ''], ['', '', '']]
print(count_paths(grid9))  # 20

grid10 = [['', '', '', ''], ['', '', '', ''], ['', '', '', '']]
print(count_paths(grid10))  # 10

grid11 = [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']]
print(count_paths(grid11))  # 252

grid12 = [['', '', '', '', '', ''], ['', '', '', 'snake', '', ''], ['', '', '', '', '', '']]
print(count_paths(grid12))  # 0

grid13 = [['', '', '', '', '', ''], ['', '', '', '', '', 'snake'], ['', '', '', '', '', '']]
print(count_paths(grid13))  # 0

grid14 = [['', '', '', ''], ['', '', 'snake', ''], ['', '', '', '']]
print(count_paths(grid14))  # 0

grid15 = [['', '', '', ''], ['snake', '', '', ''], ['', '', '', '']]
print(count_paths(grid15))  # 0

grid16 = [['', '', '', '', '', '', '', '', '', ''],
          ['', '', '', '', '', '', '', '', '', ''],
          ['', '', '', '', '', '', '', '', '', ''],
          ['', '', '', '', '', '', '', '', '', '']]
print(count_paths(grid16))  # 48620

grid17 = [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', 'snake', '', ''], ['', '', '', '', '']]
print(count_paths(grid17))  # 0

grid18 = [['', '', '', '', ''], ['', '', '', '', 'snake'], ['', '', '', '', ''], ['', '', 'snake', '', ''], ['', '', '', '', '']]
print(count_paths(grid18))  # 0

grid19 = [['', '', '', ''], ['', '', '', ''], ['', '', '',